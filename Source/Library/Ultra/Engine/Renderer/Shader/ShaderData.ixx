export module Ultra.Engine.ShaderData;

import Ultra.Core;

///
/// @brief Shader Data Definition
/// 
export namespace Ultra {

// Shader Domains
enum class ShaderDomain {
    Null        = 0x0,
    Vertex      = 0x1,  // Computes the position, color, and attributes of individual vertices in a 3D model.
    Control     = 0x2,  // Generates new vertices using a set of control points in a process called tessellation (aka Hull).
    Evaluation  = 0x3,  // Evaluates the position and other attributes of the new vertices generated by the control/hull shader in tessellation (aka Domain).
    Geometry    = 0x4,  // Generates additional geometry, such as particles or detail, based on the input vertices.
    Pixel       = 0x5,  // Determines the color and other attributes of individual pixels in the final rendered image.
    Compute     = 0x6,  // Performs general-purpose computation on the GPU, such as physics simulation or data processing.
};

// Shader Languages
enum class ShaderLanguage {
    Null = 0x0u,
    GLSL = 0x1u,
    HLSL = 0x2u,
};

// Shader Data Types (basic)
enum class ShaderDataType: uint32_t {
	Null    = 0x00u,

	Bool    = 0x11u,
    Bool2   = 0x12u,
    Bool3   = 0x13u,
    Bool4   = 0x14u,

	Float   = 0x21u,
	Float2  = 0x22u,
	Float3  = 0x23u,
	Float4  = 0x24u,

	Int     = 0x31u,
	Int2    = 0x32u,
	Int3    = 0x33u,
	Int4    = 0x34u,

    Mat2    = 0x42u,
	Mat3    = 0x43u,
	Mat4    = 0x44u,
};

uint32_t ShaderDataTypeSize(ShaderDataType type) {
	switch (type) {
		case ShaderDataType::Bool:	    return 1u;
        case ShaderDataType::Bool2:     return 1u * 2u;
        case ShaderDataType::Bool3:     return 1u * 3u;
        case ShaderDataType::Bool4:     return 1u * 4u;
		case ShaderDataType::Float:		return 4u;
		case ShaderDataType::Float2:	return 4u * 2u;
		case ShaderDataType::Float3:	return 4u * 3u;
		case ShaderDataType::Float4:    return 4u * 4u;
		case ShaderDataType::Int:	    return 4u;
		case ShaderDataType::Int2:	    return 4u * 2u;
		case ShaderDataType::Int3:	    return 4u * 3u;
		case ShaderDataType::Int4:	    return 4u * 4u;
        case ShaderDataType::Mat2:	    return 4u * 3u * 3u;
		case ShaderDataType::Mat3:	    return 4u * 3u * 3u;
		case ShaderDataType::Mat4:	    return 4u * 4u * 4u;
		default:						return 0u;
	}
}

// Shader Uniform Types (specific)
enum class ShaderUniformType {
    // Scalars
    Null    = 0x00,
    Bool    = 0x01,
    Int     = 0x02,
    UInt    = 0x03,
    Float   = 0x04,
    Double  = 0x05,

    // Vectors
    BVec    = 0x11,
    BVec2   = 0x12,
    BVec3   = 0x13,
    BVec4   = 0x14,
    IVec    = 0x21,
    IVec2   = 0x22,
    IVec3   = 0x23,
    IVec4   = 0x24,
    UVec    = 0x31,
    UVec2   = 0x32,
    UVec3   = 0x33,
    UVec4   = 0x34,
    Vec     = 0x41,
    Vec2    = 0x42,
    Vec3    = 0x43,
    Vec4    = 0x44,
    DVec    = 0x51,
    DVec2   = 0x52,
    DVec3   = 0x53,
    DVec4   = 0x54,

    // Matrices
    Mat2    = 0x27,
    Mat3    = 0x28,
    Mat4    = 0x29,
};

}
